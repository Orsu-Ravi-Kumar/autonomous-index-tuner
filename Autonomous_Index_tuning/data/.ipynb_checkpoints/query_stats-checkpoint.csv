0xB1A8D62FCF665755,1,185920,302287,85899,50,"(@_msparam_0 nvarchar(4000))SELECT SCHEMA_NAME(udf.schema_id) AS [Schema], udf.name AS [Name], udf.object_id AS [ID], (case when 'FN' = udf.type then 1 when 'FS' = udf.type then 1 when 'IF' = udf.type then 3 when 'TF' = udf.type then 2 when 'FT' = udf.type then 2 else 0 end) AS [FunctionType], CASE WHEN udf.type IN ('FN','IF','TF') THEN 1 WHEN udf.type IN ('FS','FT') THEN 2 ELSE 1 END AS [ImplementationType], CAST(  case      when udf.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = udf.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], CAST(CASE WHEN ISNULL(smudf.definition, ssmudf.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id, N'IsSchemaBound'),0) AS bit) AS [IsSchemaBound], usrt.name AS [DataType] FROM sys.all_objects AS udf LEFT OUTER JOIN sys.sql_modules AS smudf ON smudf.object_id = udf.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmudf ON ssmudf.object_id = udf.object_id LEFT OUTER JOIN sys.all_parameters AS ret_param ON ret_param.object_id = udf.object_id and ret_param.is_output = @_msparam_0 LEFT OUTER JOIN sys.types AS usrt ON usrt.user_type_id = ret_param.user_type_id WHERE (udf.type in ('TF', 'FN', 'IF', 'FS', 'FT')) ORDER BY [Schema] ASC,[Name] ASC"
0x13A9FBC5DE8926F0,1,136714,209635,116398,0,"(@_msparam_0 nvarchar(4000))SELECT SCHEMA_NAME(v.schema_id) AS [Schema], v.name AS [Name], v.object_id AS [ID] FROM sys.all_views AS v WHERE (v.type = @_msparam_0) ORDER BY [Schema] ASC,[Name] ASC"
0xE2D481769B70E309,1,73640,151664,81179,0,"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000),@_msparam_2 nvarchar(4000))SELECT SCHEMA_NAME(sp.schema_id) AS [Schema], sp.name AS [Name], sp.object_id AS [ID], CAST(  case      when sp.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = sp.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], CASE WHEN sp.type = N'P' THEN 1 WHEN sp.type = N'PC' THEN 2 ELSE 1 END AS [ImplementationType], CAST(CASE WHEN ISNULL(smsp.definition, ssmsp.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted] FROM sys.all_objects AS sp LEFT OUTER JOIN sys.sql_modules AS smsp ON smsp.object_id = sp.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmsp ON ssmsp.object_id = sp.object_id WHERE (sp.type = @_msparam_0 OR sp.type = @_msparam_1 OR sp.type=@_msparam_2) ORDER BY [Schema] ASC,[Name] ASC"
0x8FFB5273EAD907CE,1,38406,38407,112,0,"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000),@_msparam_2 nvarchar(4000))SELECT udf.name AS [Name], udf.object_id AS [ID], udf.create_date AS [CreateDate], udf.modify_date AS [DateLastModified], ISNULL(sudf.name, N'') AS [Owner], CAST(case when udf.principal_id is null then 1 else 0 end AS bit) AS [IsSchemaOwned], SCHEMA_NAME(udf.schema_id) AS [Schema], CAST(  case      when udf.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = udf.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], usrt.name AS [DataType], s1ret_param.name AS [DataTypeSchema], ISNULL(baset.name, N'') AS [SystemType], CAST(CASE WHEN baset.name IN (N'nchar', N'nvarchar') AND ret_param.max_length <> -1 THEN ret_param.max_length/2 ELSE ret_param.max_length END AS int) AS [Length], CAST(ret_param.precision AS int) AS [NumericPrecision], CAST(ret_param.scale AS int) AS [NumericScale], ISNULL(xscret_param.name, N'') AS [XmlSchemaNamespace], ISNULL(s2ret_param.name, N'') AS [XmlSchemaNamespaceSchema], ISNULL( (case ret_param.is_xml_document when 1 then 2 else 1 end), 0) AS [XmlDocumentConstraint], CASE WHEN usrt.is_table_type = 1 THEN N'structured' ELSE N'' END AS [UserType], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id,N'ExecIsAnsiNullsOn'),0) AS bit) AS [AnsiNullsStatus], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id, N'IsSchemaBound'),0) AS bit) AS [IsSchemaBound], CAST(CASE WHEN ISNULL(smudf.definition, ssmudf.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted], case when amudf.object_id is null then N'' else asmbludf.name end AS [AssemblyName], case when amudf.object_id is null then N'' else amudf.assembly_class end AS [ClassName], case when amudf.object_id is null then N'' else amudf.assembly_method end AS [MethodName], CAST(case when amudf.object_id is null then CAST(smudf.null_on_null_input AS bit) else amudf.null_on_null_input end AS bit) AS [ReturnsNullOnNullInput], case when amudf.object_id is null then case isnull(smudf.execute_as_principal_id, -1) when -1 then 1 when -2 then 2 else 3 end else case isnull(amudf.execute_as_principal_id, -1) when -1 then 1 when -2 then 2 else 3 end end AS [ExecutionContext], case when amudf.object_id is null then ISNULL(user_name(smudf.execute_as_principal_id),N'') else ISNULL(user_name(amudf.execute_as_principal_id), N'') end AS [ExecutionContextPrincipal], CAST(OBJECTPROPERTYEX(udf.object_id, N'IsDeterministic') AS bit) AS [IsDeterministic], (case when 'FN' = udf.type then 1 when 'FS' = udf.type then 1 when 'IF' = udf.type then 3 when 'TF' = udf.type then 2 when 'FT' = udf.type then 2 else 0 end) AS [FunctionType], CASE WHEN udf.type IN ('FN','IF','TF') THEN 1 WHEN udf.type IN ('FS','FT') THEN 2 ELSE 1 END AS [ImplementationType], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id,N'ExecIsQuotedIdentOn'),0) AS bit) AS [QuotedIdentifierStatus], ret_param.name AS [TableVariableName], ISNULL(sm.uses_native_compilation,0) AS [IsNativelyCompiled], CAST(ISNULL(sm.inline_type,0) AS bit) AS [InlineType], CAST(ISNULL(sm.is_inlineable,0) AS bit) AS [IsInlineable], ISNULL(smudf.definition, ssmudf.definition) AS [Definition] FROM sys.all_objects AS udf LEFT OUTER JOIN sys.database_principals AS sudf ON sudf.principal_id = ISNULL(udf.principal_id, (OBJECTPROPERTY(udf.object_id, 'OwnerId'))) LEFT OUTER JOIN sys.all_parameters AS ret_param ON ret_param.object_id = udf.object_id and ret_param.is_output = @_msparam_0 LEFT OUTER JOIN sys.types AS usrt ON usrt.user_type_id = ret_param.user_type_id LEFT OUTER JOIN sys.schemas AS s1ret_param ON s1ret_param.schema_id = usrt.schema_id LEFT OUTER JOIN sys.types AS baset ON (baset.user_type_id = ret_param.system_type_id and baset.user_type_id = baset.system_type_id) or ((baset.system_type_id = ret_param.system_type_id) and (baset.user_type_id = ret_param.user_type_id) and (baset.is_user_defined = 0) and (baset.is_assembly_type = 1))  LEFT OUTER JOIN sys.xml_schema_collections AS xscret_param ON xscret_param.xml_collection_id = ret_param.xml_collection_id LEFT OUTER JOIN sys.schemas AS s2ret_param ON s2ret_param.schema_id = xscret_param.schema_id LEFT OUTER JOIN sys.sql_modules AS smudf ON smudf.object_id = udf.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmudf ON ssmudf.object_id = udf.object_id LEFT OUTER JOIN sys.assembly_modules AS amudf ON amudf.object_id = udf.object_id LEFT OUTER JOIN sys.assemblies AS asmbludf ON asmbludf.assembly_id = amudf.assembly_id LEFT OUTER JOIN sys.all_sql_modules AS sm ON sm.object_id = udf.object_id WHERE (udf.type in ('TF', 'FN', 'IF', 'FS', 'FT'))and(udf.name=@_msparam_1 and SCHEMA_NAME(udf.schema_id)=@_msparam_2)"
0xD3833A3D2F7E0E89,1,4978,8226,292,0,"SELECT log.name AS [Name], log.principal_id AS [ID], ISNULL(ak.name,N'') AS [AsymmetricKey], ISNULL(cert.name,N'') AS [Certificate], ISNULL(c.name,N'') AS [Credential], CASE WHEN N'U' = log.type THEN 0 WHEN N'G' = log.type THEN 1 WHEN N'S' = log.type THEN 2 WHEN N'C' = log.type THEN 3 WHEN N'K' = log.type THEN 4  WHEN N'E' = log.type THEN 5 WHEN N'X' = log.type THEN 6 END AS [LoginType] FROM sys.server_principals AS log LEFT OUTER JOIN master.sys.asymmetric_keys AS ak ON ak.sid = log.sid LEFT OUTER JOIN master.sys.certificates AS cert ON cert.sid = log.sid LEFT OUTER JOIN sys.credentials AS c ON c.credential_id = log.credential_id WHERE (log.type in ('U', 'G', 'S', 'C', 'K', 'E', 'X') AND log.principal_id not between 101 and 255 AND log.name <> N'##MS_AgentSigningCertificate##') ORDER BY [Name] ASC"
0x536191182F18123A,1,3989,12458,224,0,"         declare @HkeyLocal nvarchar(18)         declare @ServicesRegPath nvarchar(34)         declare @SqlServiceRegPath sysname         declare @BrowserServiceRegPath sysname         declare @MSSqlServerRegPath nvarchar(31)         declare @InstanceNamesRegPath nvarchar(59)         declare @InstanceRegPath sysname         declare @SetupRegPath sysname         declare @NpRegPath sysname         declare @TcpRegPath sysname         declare @RegPathParams sysname         declare @FilestreamRegPath sysname          select @HkeyLocal=N'HKEY_LOCAL_MACHINE'          -- Instance-based paths         select @MSSqlServerRegPath=N'SOFTWARE\Microsoft\MSSQLServer'         select @InstanceRegPath=@MSSqlServerRegPath + N'\MSSQLServer'         select @FilestreamRegPath=@InstanceRegPath + N'\Filestream'         select @SetupRegPath=@MSSqlServerRegPath + N'\Setup'         select @RegPathParams=@InstanceRegPath+'\Parameters'          -- Services         select @ServicesRegPath=N'SYSTEM\CurrentControlSet\Services'         select @SqlServiceRegPath=@ServicesRegPath + N'\MSSQLSERVER'         select @BrowserServiceRegPath=@ServicesRegPath + N'\SQLBrowser'          -- InstanceId setting         select @InstanceNamesRegPath=N'SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL'          -- Network settings         select @NpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Np'         select @TcpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Tcp'                  declare @SmoAuditLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'AuditLevel', @SmoAuditLevel OUTPUT                  declare @NumErrorLogs int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'NumErrorLogs', @NumErrorLogs OUTPUT                  declare @SmoLoginMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'LoginMode', @SmoLoginMode OUTPUT                  declare @SmoMailProfile nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'MailAccountName', @SmoMailProfile OUTPUT                  declare @BackupDirectory nvarchar(512)         if 1=isnull(cast(SERVERPROPERTY('IsLocalDB') as bit), 0)         select @BackupDirectory=cast(SERVERPROPERTY('instancedefaultdatapath') as nvarchar(512))         else         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'BackupDirectory', @BackupDirectory OUTPUT                  declare @SmoPerfMonMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'Performance', @SmoPerfMonMode OUTPUT          if @SmoPerfMonMode is null         begin         set @SmoPerfMonMode = 1000         end                  declare @InstallSqlDataDir nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLDataRoot', @InstallSqlDataDir OUTPUT                  declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 1         select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 2         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @SmoRoot OUTPUT                  declare @ServiceStartMode int         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'Start', @ServiceStartMode OUTPUT                  declare @ServiceAccount nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'ObjectName', @ServiceAccount OUTPUT                  declare @NamedPipesEnabled int         exec master.dbo.xp_instance_regread @HkeyLocal, @NpRegPath, N'Enabled', @NamedPipesEnabled OUTPUT                  declare @TcpEnabled int         EXEC master.sys.xp_instance_regread @HkeyLocal, @TcpRegPath, N'Enabled', @TcpEnabled OUTPUT                  declare @InstallSharedDirectory nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @InstallSharedDirectory OUTPUT                  declare @SqlGroup nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLGroup', @SqlGroup OUTPUT                  declare @FilestreamLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'EnableLevel', @FilestreamLevel OUTPUT                  declare @FilestreamShareName nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'ShareName', @FilestreamShareName OUTPUT                  declare @cluster_name nvarchar(128)         declare @quorum_type tinyint         declare @quorum_state tinyint         BEGIN TRY         SELECT @cluster_name = cluster_name,         @quorum_type = quorum_type,         @quorum_state = quorum_state         FROM sys.dm_hadr_cluster         END TRY         BEGIN CATCH           IF(ERROR_NUMBER() NOT IN (297,300, 15562, 371))         BEGIN         THROW         END         END CATCH         SELECT @SmoAuditLevel AS [AuditLevel], ISNULL(@NumErrorLogs, -1) AS [NumberOfLogFiles], (case when @SmoLoginMode < 3 then @SmoLoginMode else 9 end) AS [LoginMode], ISNULL(@SmoMailProfile,N'') AS [MailProfile], @BackupDirectory AS [BackupDirectory], @SmoPerfMonMode AS [PerfMonMode], ISNULL(@InstallSqlDataDir,N'') AS [InstallDataDirectory], CAST(@@SERVICENAME AS sysname) AS [ServiceName], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(ISNULL(SERVERPROPERTY(N'ProductUpdateLevel'), N'') AS sysname) AS [ProductUpdateLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY('IsClustered'), 0) AS bit) AS [IsClustered], CAST(ISNULL(SERVERPROPERTY(N'MachineName'), N'') AS sysname) AS [NetName], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], ISNULL(@ServiceStartMode,2) AS [ServiceStartMode], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY('instancedefaultdatapath') AS [DefaultFile], SERVERPROPERTY('instancedefaultlogpath') AS [DefaultLog], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(@ServiceAccount,N'') AS [ServiceAccount], CAST(@NamedPipesEnabled AS bit) AS [NamedPipesEnabled], CAST(@TcpEnabled AS bit) AS [TcpEnabled], ISNULL(@InstallSharedDirectory,N'') AS [InstallSharedDirectory], ISNULL(suser_sname(sid_binary(ISNULL(@SqlGroup,N''))),N'') AS [SqlDomainGroup], case when 1=msdb.dbo.fn_syspolicy_is_automation_enabled() and exists (select * from msdb.dbo.syspolicy_system_health_state  where target_query_expression_with_id like 'Server%' ) then 1 else 0 end AS [PolicyHealthState], @FilestreamLevel AS [FilestreamLevel], ISNULL(@FilestreamShareName,N'') AS [FilestreamShareName], -1 AS [TapeLoadWaitTime], CAST(SERVERPROPERTY(N'IsHadrEnabled') AS bit) AS [IsHadrEnabled], SERVERPROPERTY(N'HADRManagerStatus') AS [HadrManagerStatus], ISNULL(@cluster_name, '') AS [ClusterName], ISNULL(@quorum_type, 4) AS [ClusterQuorumType], ISNULL(@quorum_state, 3) AS [ClusterQuorumState], SUSER_SID(@ServiceAccount, 0) AS [ServiceAccountSid], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled], CAST(         serverproperty(N'Servername')        AS sysname) AS [Name], CAST(         ISNULL(serverproperty(N'instancename'),N'')        AS sysname) AS [InstanceName], CAST(0x0001 AS int) AS [Status], SERVERPROPERTY('PathSeparator') AS [PathSeparator], 0 AS [IsContainedAuthentication], CAST(null AS int) AS [ServerType]"
0xD9C1F500413E514F,1,3425,6820,40,0,"SELECT SCHEMA_NAME(xproc.schema_id) AS [Schema], xproc.name AS [Name], xproc.object_id AS [ID], CAST(                 xproc.is_ms_shipped             AS bit) AS [IsSystemObject] FROM sys.all_objects AS xproc WHERE (xproc.type='X') ORDER BY [Schema] ASC,[Name] ASC"
0x606553F55874F4F6,1,2785,5044,2,0,"SELECT tr.name AS [Name], tr.object_id AS [ID], CAST(                 tr.is_ms_shipped             AS bit) AS [IsSystemObject], CASE WHEN tr.type = N'TR' THEN 1 WHEN tr.type = N'TA' THEN 2 ELSE 1 END AS [ImplementationType], CAST(CASE WHEN ssmod.definition IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted] FROM master.sys.server_triggers AS tr LEFT OUTER JOIN master.sys.server_assembly_modules AS mod ON mod.object_id = tr.object_id LEFT OUTER JOIN sys.server_sql_modules AS ssmod ON ssmod.object_id = tr.object_id WHERE (tr.parent_class = 100) ORDER BY [Name] ASC"
0xC22BABEC72366F32,1,2271,2272,40,0,"SELECT SCHEMA_NAME(obj.schema_id) AS [Schema], obj.name AS [Name], obj.object_id AS [ID], usrt.name AS [DataType] FROM sys.objects AS obj LEFT OUTER JOIN sys.all_parameters AS ret_param ON ret_param.object_id = obj.object_id and ret_param.is_output = 1 LEFT OUTER JOIN sys.types AS usrt ON usrt.user_type_id = ret_param.user_type_id WHERE (obj.type=N'AF') ORDER BY [Schema] ASC,[Name] ASC"
0xEBC83DD64EE85FB0,1,2177,2609,40,0,"SELECT SCHEMA_NAME(tbl.schema_id) AS [Schema], tbl.name AS [Name], tbl.object_id AS [ID] FROM sys.tables AS tbl ORDER BY [Schema] ASC,[Name] ASC"
0x5C4DEE78CBDB10C9,2,944,1964,16,3,"(@planId bigint, @queryId bigint, @replicaGroupId bigint, @startTime datetimeoffset, @APRC_SUM_SQUARE_CPU_SCALE int, @accountAbortedFlag bit,@sumCountExecutions bigint OUTPUT,@sumCountAborted bigint OUTPUT,@sumCpuTime bigint OUTPUT,@sumSquareCpuTime bigint OUTPUT,@exitPoint bigint OUTPUT)set nocount on;																													set @exitPoint = 1;																													declare @intervals table(interval_id bigint not null primary key);																																																		declare @planType nvarchar(20);																										declare @plansByGroup table(plan_id bigint, plan_type nvarchar(20));																declare @plansToCheck table(plan_id bigint);																																																							if @replicaGroupId > 1																												begin																																	insert into @intervals(interval_id)                                                                                         		select runtime_stats_interval_id																										from sys.plan_persist_runtime_stats_interval_merged with(nolock)																	where end_time >= @startTime;																								end                                                                                                                             	else																																begin																																	insert into @intervals(interval_id)                                                                                         		select runtime_stats_interval_id																										from sys.plan_persist_runtime_stats_interval	with(nolock)																		where end_time >= @startTime;																								end                                                                                                                             																																		if @@rowcount = 0																													goto lbexit;																																																															set @exitPoint = 2;																																																														if (@queryId <> -1)																													begin																																	insert into @plansByGroup(plan_id, plan_type)																						select plan_id,																															case when plan_group_id = 0 then N'NonCursor'																							 when count = 1 then N'Dynamic'																										 when rownum = 1 then N'StaticFetch'																							else N'StaticPopulate' end as plan_type																							from(select plan_id, plan_group_id,																										row_number() over(partition by plan_group_id order by plan_id asc) as rownum,														count(plan_id) over(partition by plan_group_id) as count																			from sys.plan_persist_plan with(nolock)																							where query_id = @queryId) as p																																																											select @planType = plan_type from @plansByGroup where plan_id = @planId																																																	insert into @plansToCheck(plan_id)																									select plan_id = prsm.plan_id																										from sys.plan_persist_runtime_stats_merged prsm with(nolock)																		inner join @plansByGroup pbg on pbg.plan_id = prsm.plan_id																			where plan_type = @planType AND																											prsm.replica_group_id = @replicaGroupId AND																							prsm.last_execution_time > @startTime																						end																																	else																																begin																																	insert into @plansToCheck(plan_id)																									select @planId																													end																																																																		select																																	@sumCountExecutions = sum(case when (execution_type = 0 or @accountAbortedFlag = 1) then count_executions else 0 end),				@sumCountAborted = sum(case when execution_type in(3, 4) then count_executions else 0 end),											@sumCpuTime = sum(case when (execution_type = 0 or @accountAbortedFlag = 1) then total_cpu_time else 0 end),						@sumSquareCpuTime = sum(case when (execution_type = 0 or @accountAbortedFlag = 1)																				 then sumsquare_cpu_time else 0 end) / @APRC_SUM_SQUARE_CPU_SCALE									from sys.plan_persist_runtime_stats_merged as r with(nolock)																		inner join @intervals as i on r.runtime_stats_interval_id = i.interval_id															inner join @plansToCheck ptc on r.plan_id = ptc.plan_id																				where r.replica_group_id = @replicaGroupId AND																							execution_type in(0, 3, 4);																																																											lbexit:																															"
0xC85374EF1B622048,1,1858,1858,40,0,"SELECT u.name AS [Name], u.principal_id AS [ID], ISNULL(ak.name,N'') AS [AsymmetricKey], ISNULL(cert.name,N'') AS [Certificate],          CASE         WHEN N'C' = u.type THEN 1         WHEN N'K' = u.type THEN 2         WHEN N'S' = u.type AND SUSER_SNAME(u.sid) is null AND u.authentication_type != 2 THEN 3         WHEN N'E' = u.type or N'X' = u.type THEN 4         ELSE 0 END        AS [UserType] FROM sys.database_principals AS u LEFT OUTER JOIN sys.asymmetric_keys AS ak ON ak.sid = u.sid LEFT OUTER JOIN sys.certificates AS cert ON cert.sid = u.sid WHERE (u.type in ('U', 'S', 'G', 'C', 'K' ,'E', 'X')) ORDER BY [Name] ASC"
0x05EDD0954B967862,1,1703,1703,40,0,"SELECT SCHEMA_NAME(s.schema_id) AS [Schema], s.name AS [Name], s.object_id AS [ID], N'' AS [BaseDatabase], N'' AS [BaseObject], N'' AS [BaseSchema], N'' AS [BaseServer],  			CASE OBJECTPROPERTYEX(s.object_id,'BaseType')  				WHEN N'U' THEN 1  				WHEN N'V' THEN 2  				WHEN N'P' THEN 3  				WHEN N'FN' THEN 4  				WHEN N'TF' THEN 5  				WHEN N'IF' THEN 6  				WHEN N'X' THEN 7  				WHEN N'RF' THEN 8  				WHEN N'PC' THEN 9  				WHEN N'FS' THEN 10  				WHEN N'FT' THEN 11  				WHEN N'AF' THEN 12 ELSE 0 END 		 AS [BaseType], s.base_object_name AS [BaseObjectName] FROM sys.synonyms AS s ORDER BY [Schema] ASC,[Name] ASC"
0x74E389DF54AFE9F3,2,776,1351,17,3,"(@planId bigint, @queryId bigint, @replicaGroupId bigint, @startTime datetimeoffset, @APRC_SUM_SQUARE_CPU_SCALE int, @accountAbortedFlag bit,@sumCountExecutions bigint OUTPUT,@sumCountAborted bigint OUTPUT,@sumCpuTime bigint OUTPUT,@sumSquareCpuTime bigint OUTPUT,@exitPoint bigint OUTPUT)set nocount on;																													set @exitPoint = 1;																													declare @intervals table(interval_id bigint not null primary key);																																																		declare @planType nvarchar(20);																										declare @plansByGroup table(plan_id bigint, plan_type nvarchar(20));																declare @plansToCheck table(plan_id bigint);																																																							if @replicaGroupId > 1																												begin																																	insert into @intervals(interval_id)                                                                                         		select runtime_stats_interval_id																										from sys.plan_persist_runtime_stats_interval_merged with(nolock)																	where end_time >= @startTime;																								end                                                                                                                             	else																																begin																																	insert into @intervals(interval_id)                                                                                         		select runtime_stats_interval_id																										from sys.plan_persist_runtime_stats_interval	with(nolock)																		where end_time >= @startTime;																								end                                                                                                                             																																		if @@rowcount = 0																													goto lbexit;																																																															set @exitPoint = 2;																																																														if (@queryId <> -1)																													begin																																	insert into @plansByGroup(plan_id, plan_type)																						select plan_id,																															case when plan_group_id = 0 then N'NonCursor'																							 when count = 1 then N'Dynamic'																										 when rownum = 1 then N'StaticFetch'																							else N'StaticPopulate' end as plan_type																							from(select plan_id, plan_group_id,																										row_number() over(partition by plan_group_id order by plan_id asc) as rownum,														count(plan_id) over(partition by plan_group_id) as count																			from sys.plan_persist_plan with(nolock)																							where query_id = @queryId) as p																																																											select @planType = plan_type from @plansByGroup where plan_id = @planId																																																	insert into @plansToCheck(plan_id)																									select plan_id = prsm.plan_id																										from sys.plan_persist_runtime_stats_merged prsm with(nolock)																		inner join @plansByGroup pbg on pbg.plan_id = prsm.plan_id																			where plan_type = @planType AND																											prsm.replica_group_id = @replicaGroupId AND																							prsm.last_execution_time > @startTime																						end																																	else																																begin																																	insert into @plansToCheck(plan_id)																									select @planId																													end																																																																		select																																	@sumCountExecutions = sum(case when (execution_type = 0 or @accountAbortedFlag = 1) then count_executions else 0 end),				@sumCountAborted = sum(case when execution_type in(3, 4) then count_executions else 0 end),											@sumCpuTime = sum(case when (execution_type = 0 or @accountAbortedFlag = 1) then total_cpu_time else 0 end),						@sumSquareCpuTime = sum(case when (execution_type = 0 or @accountAbortedFlag = 1)																				 then sumsquare_cpu_time else 0 end) / @APRC_SUM_SQUARE_CPU_SCALE									from sys.plan_persist_runtime_stats_merged as r with(nolock)																		inner join @intervals as i on r.runtime_stats_interval_id = i.interval_id															inner join @plansToCheck ptc on r.plan_id = ptc.plan_id																				where r.replica_group_id = @replicaGroupId AND																							execution_type in(0, 3, 4);																																																											lbexit:																															"
0xE2D8B1D89DF5F7CE,1,1500,1500,8,0,"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000))SELECT u.name AS [Name], u.principal_id AS [ID], CAST(CASE WHEN u.principal_id < 5 OR (u.principal_id >= 16384 and u.principal_id < 16400) THEN 1 ELSE 0 END AS bit) AS [IsSystemObject], CASE WHEN N'U' = u.type THEN 0 WHEN N'G' = u.type THEN 1 WHEN N'S' = u.type THEN 2 WHEN N'C' = u.type THEN 3 WHEN N'K' = u.type THEN 4 WHEN N'E' = u.type THEN 5 WHEN N'X' = u.type THEN 6 END AS [LoginType], CAST(CASE dp.state WHEN N'G' THEN 1 WHEN 'W' THEN 1 ELSE 0 END AS bit) AS [HasDBAccess], u.sid AS [Sid], u.create_date AS [CreateDate], u.modify_date AS [DateLastModified], ISNULL(u.default_schema_name,N'') AS [DefaultSchema], ISNULL(ak.name,N'') AS [AsymmetricKey], ISNULL(cert.name,N'') AS [Certificate], ISNULL(suser_sname(u.sid),N'') AS [Login], ISNULL(u.default_language_lcid, -1) AS [DefaultLanguageLcid], ISNULL(u.default_language_name,N'') AS [DefaultLanguageName], u.authentication_type AS [AuthenticationType],          CASE         WHEN N'C' = u.type THEN 1         WHEN N'K' = u.type THEN 2         WHEN N'S' = u.type AND SUSER_SNAME(u.sid) is null AND u.authentication_type != 2 THEN 3         WHEN N'E' = u.type or N'X' = u.type THEN 4         ELSE 0 END        AS [UserType] FROM sys.database_principals AS u LEFT OUTER JOIN sys.database_permissions AS dp ON dp.grantee_principal_id = u.principal_id and dp.type = @_msparam_0 LEFT OUTER JOIN sys.asymmetric_keys AS ak ON ak.sid = u.sid LEFT OUTER JOIN sys.certificates AS cert ON cert.sid = u.sid WHERE (u.type in ('U', 'S', 'G', 'C', 'K' ,'E', 'X'))and(u.name=@_msparam_1)"
0xBE4B25FCC059AF08,1,1201,1202,7,0,"SELECT tr.name AS [Name], tr.object_id AS [ID], CAST(                 tr.is_ms_shipped             AS bit) AS [IsSystemObject], CASE WHEN tr.type = N'TR' THEN 1 WHEN tr.type = N'TA' THEN 2 ELSE 1 END AS [ImplementationType], CAST(CASE WHEN ISNULL(smtr.definition, ssmtr.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted] FROM sys.triggers AS tr LEFT OUTER JOIN sys.sql_modules AS smtr ON smtr.object_id = tr.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmtr ON ssmtr.object_id = tr.object_id WHERE (tr.parent_class = 0) ORDER BY [Name] ASC"
0x97844F8D6700177C,2,467,467,5,0,"(@planId bigint, @queryId bigint, @replicaGroupId bigint, @startTime datetimeoffset, @APRC_SUM_SQUARE_CPU_SCALE int, @accountAbortedFlag bit,@sumCountExecutions bigint OUTPUT,@sumCountAborted bigint OUTPUT,@sumCpuTime bigint OUTPUT,@sumSquareCpuTime bigint OUTPUT,@exitPoint bigint OUTPUT)set nocount on;																													set @exitPoint = 1;																													declare @intervals table(interval_id bigint not null primary key);																																																		declare @planType nvarchar(20);																										declare @plansByGroup table(plan_id bigint, plan_type nvarchar(20));																declare @plansToCheck table(plan_id bigint);																																																							if @replicaGroupId > 1																												begin																																	insert into @intervals(interval_id)                                                                                         		select runtime_stats_interval_id																										from sys.plan_persist_runtime_stats_interval_merged with(nolock)																	where end_time >= @startTime;																								end                                                                                                                             	else																																begin																																	insert into @intervals(interval_id)                                                                                         		select runtime_stats_interval_id																										from sys.plan_persist_runtime_stats_interval	with(nolock)																		where end_time >= @startTime;																								end                                                                                                                             																																		if @@rowcount = 0																													goto lbexit;																																																															set @exitPoint = 2;																																																														if (@queryId <> -1)																													begin																																	insert into @plansByGroup(plan_id, plan_type)																						select plan_id,																															case when plan_group_id = 0 then N'NonCursor'																							 when count = 1 then N'Dynamic'																										 when rownum = 1 then N'StaticFetch'																							else N'StaticPopulate' end as plan_type																							from(select plan_id, plan_group_id,																										row_number() over(partition by plan_group_id order by plan_id asc) as rownum,														count(plan_id) over(partition by plan_group_id) as count																			from sys.plan_persist_plan with(nolock)																							where query_id = @queryId) as p																																																											select @planType = plan_type from @plansByGroup where plan_id = @planId																																																	insert into @plansToCheck(plan_id)																									select plan_id = prsm.plan_id																										from sys.plan_persist_runtime_stats_merged prsm with(nolock)																		inner join @plansByGroup pbg on pbg.plan_id = prsm.plan_id																			where plan_type = @planType AND																											prsm.replica_group_id = @replicaGroupId AND																							prsm.last_execution_time > @startTime																						end																																	else																																begin																																	insert into @plansToCheck(plan_id)																									select @planId																													end																																																																		select																																	@sumCountExecutions = sum(case when (execution_type = 0 or @accountAbortedFlag = 1) then count_executions else 0 end),				@sumCountAborted = sum(case when execution_type in(3, 4) then count_executions else 0 end),											@sumCpuTime = sum(case when (execution_type = 0 or @accountAbortedFlag = 1) then total_cpu_time else 0 end),						@sumSquareCpuTime = sum(case when (execution_type = 0 or @accountAbortedFlag = 1)																				 then sumsquare_cpu_time else 0 end) / @APRC_SUM_SQUARE_CPU_SCALE									from sys.plan_persist_runtime_stats_merged as r with(nolock)																		inner join @intervals as i on r.runtime_stats_interval_id = i.interval_id															inner join @plansToCheck ptc on r.plan_id = ptc.plan_id																				where r.replica_group_id = @replicaGroupId AND																							execution_type in(0, 3, 4);																																																											lbexit:																															"
0xF4DCFC0F47C9D567,1,540,540,32,0,"SELECT dtb.name AS [Name], CAST(0 AS bit) AS [IsFabricDatabase], dtb.database_id AS [ID], CAST(has_dbaccess(dtb.name) AS bit) AS [IsAccessible] FROM master.sys.databases AS dtb ORDER BY [Name] ASC"
0xE167F1DAA845040B,1,540,540,42,0,"SELECT dtb.name AS [Name], CAST(0 AS bit) AS [IsFabricDatabase], dtb.database_id AS [ID], CAST(case when dtb.name in ('master','model','msdb','tempdb') then 1 else dtb.is_distributor end AS bit) AS [IsSystemObject], dtb.collation_name AS [Collation], CAST(has_dbaccess(dtb.name) AS bit) AS [IsAccessible], dtb.name AS [DatabaseName2] FROM master.sys.databases AS dtb ORDER BY [Name] ASC"
0x88D56FCE1A0ADDA2,2,207,207,8,0,"(@_msparam_0 nvarchar(4000))SELECT dtb.collation_name AS [Collation], dtb.name AS [DatabaseName2] FROM master.sys.databases AS dtb WHERE (dtb.name=@_msparam_0)"
0xBC4077C116EA484D,1,414,414,32,0,"SELECT dtb.name AS [Name], dtb.state AS [State] FROM master.sys.databases dtb"
0x83CCAC2AAF467BFC,1,335,1313,50,0,SELECT rl.name AS [Name] FROM sys.database_principals AS rl WHERE (rl.type = 'R') ORDER BY [Name] ASC
0x6EAF78ED57B77B37,1,280,281,14,0,"SELECT satypes.name AS [Schema], atypes.name AS [Name] FROM sys.assembly_types AS atypes INNER JOIN sys.assemblies AS asmbl ON (asmbl.assembly_id = atypes.assembly_id) and (atypes.is_user_defined = 1) INNER JOIN sys.schemas AS satypes ON satypes.schema_id = atypes.schema_id ORDER BY [Schema] ASC,[Name] ASC"
0x83CCAC2AAF467BFC,1,271,1366,30,0,SELECT rl.name AS [Name] FROM sys.database_principals AS rl WHERE (rl.type = 'A') ORDER BY [Name] ASC
0xC738B306AA6B57B5,1,233,233,2,0,"SELECT SCHEMA_NAME(tt.schema_id) AS [Schema], tt.name AS [Name] FROM sys.table_types AS tt INNER JOIN sys.schemas AS stt ON stt.schema_id = tt.schema_id ORDER BY [Schema] ASC,[Name] ASC"
0xB59B3DDBEF4650B0,1,208,208,11,0,"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000))SELECT NULL AS [Text], ISNULL(smudf.definition, ssmudf.definition) AS [Definition] FROM sys.all_objects AS udf LEFT OUTER JOIN sys.sql_modules AS smudf ON smudf.object_id = udf.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmudf ON ssmudf.object_id = udf.object_id WHERE (udf.type in ('TF', 'FN', 'IF', 'FS', 'FT'))and(udf.name=@_msparam_0 and SCHEMA_NAME(udf.schema_id)=@_msparam_1)"
0xCAF08BE13BA099DA,1,200,200,8,0,"(@_msparam_0 nvarchar(4000))SELECT '' AS [DefaultSchema], dtb.name AS [DatabaseName] FROM master.sys.databases AS dtb WHERE (dtb.name=@_msparam_0)"
0xED6D407A55041948,1,191,191,10,0,"(@_msparam_0 nvarchar(4000))SELECT dtb.containment AS [ContainmentType], dtb.catalog_collation_type AS [CatalogCollation] FROM master.sys.databases AS dtb WHERE (dtb.name=@_msparam_0)"
0xEBF4A17ACA6FCF73,1,163,164,2,0,"SELECT sst.name AS [Schema], st.name AS [Name] FROM sys.types AS st INNER JOIN sys.schemas AS sst ON sst.schema_id = st.schema_id WHERE (st.schema_id!=4 and st.system_type_id!=240 and st.user_type_id != st.system_type_id and st.is_table_type != 1) ORDER BY [Schema] ASC,[Name] ASC"
0x98A530CE5357B9BF,4,28,29,0,0,"DECLARE @edition sysname; SET @edition = cast(SERVERPROPERTY(N'EDITION') as sysname); SELECT case when @edition = N'SQL Azure' then 2 else 1 end as 'DatabaseEngineType', SERVERPROPERTY('EngineEdition') AS DatabaseEngineEdition, SERVERPROPERTY('ProductVersion') AS ProductVersion, @@MICROSOFTVERSION AS MicrosoftVersion; select host_platform from sys.dm_os_host_info if @edition = N'SQL Azure'    select 'TCP' as ConnectionProtocol else   exec ('select CONVERT(nvarchar(40),CONNECTIONPROPERTY(''net_transport'')) as ConnectionProtocol') "
0x713F4292A9422787,2,47,47,2,0,"CREATE   FUNCTION fn_syspolicy_is_automation_enabled() RETURNS bit AS BEGIN     DECLARE @ret bit;     SELECT @ret = CONVERT(bit, current_value)         FROM msdb.dbo.syspolicy_configuration          WHERE name = 'Enabled'       RETURN @ret; END "
0x90840303ED46D854,1,94,94,2,0,"         declare @HkeyLocal nvarchar(18)         declare @ServicesRegPath nvarchar(34)         declare @SqlServiceRegPath sysname         declare @BrowserServiceRegPath sysname         declare @MSSqlServerRegPath nvarchar(31)         declare @InstanceNamesRegPath nvarchar(59)         declare @InstanceRegPath sysname         declare @SetupRegPath sysname         declare @NpRegPath sysname         declare @TcpRegPath sysname         declare @RegPathParams sysname         declare @FilestreamRegPath sysname          select @HkeyLocal=N'HKEY_LOCAL_MACHINE'          -- Instance-based paths         select @MSSqlServerRegPath=N'SOFTWARE\Microsoft\MSSQLServer'         select @InstanceRegPath=@MSSqlServerRegPath + N'\MSSQLServer'         select @FilestreamRegPath=@InstanceRegPath + N'\Filestream'         select @SetupRegPath=@MSSqlServerRegPath + N'\Setup'         select @RegPathParams=@InstanceRegPath+'\Parameters'          -- Services         select @ServicesRegPath=N'SYSTEM\CurrentControlSet\Services'         select @SqlServiceRegPath=@ServicesRegPath + N'\MSSQLSERVER'         select @BrowserServiceRegPath=@ServicesRegPath + N'\SQLBrowser'          -- InstanceId setting         select @InstanceNamesRegPath=N'SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL'          -- Network settings         select @NpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Np'         select @TcpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Tcp'                  declare @SmoAuditLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'AuditLevel', @SmoAuditLevel OUTPUT                  declare @NumErrorLogs int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'NumErrorLogs', @NumErrorLogs OUTPUT                  declare @SmoLoginMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'LoginMode', @SmoLoginMode OUTPUT                  declare @SmoMailProfile nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'MailAccountName', @SmoMailProfile OUTPUT                  declare @BackupDirectory nvarchar(512)         if 1=isnull(cast(SERVERPROPERTY('IsLocalDB') as bit), 0)         select @BackupDirectory=cast(SERVERPROPERTY('instancedefaultdatapath') as nvarchar(512))         else         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'BackupDirectory', @BackupDirectory OUTPUT                  declare @SmoPerfMonMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'Performance', @SmoPerfMonMode OUTPUT          if @SmoPerfMonMode is null         begin         set @SmoPerfMonMode = 1000         end                  declare @InstallSqlDataDir nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLDataRoot', @InstallSqlDataDir OUTPUT                  declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 1         select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 2         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @SmoRoot OUTPUT                  declare @ServiceStartMode int         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'Start', @ServiceStartMode OUTPUT                  declare @ServiceAccount nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'ObjectName', @ServiceAccount OUTPUT                  declare @NamedPipesEnabled int         exec master.dbo.xp_instance_regread @HkeyLocal, @NpRegPath, N'Enabled', @NamedPipesEnabled OUTPUT                  declare @TcpEnabled int         EXEC master.sys.xp_instance_regread @HkeyLocal, @TcpRegPath, N'Enabled', @TcpEnabled OUTPUT                  declare @InstallSharedDirectory nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @InstallSharedDirectory OUTPUT                  declare @SqlGroup nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLGroup', @SqlGroup OUTPUT                  declare @FilestreamLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'EnableLevel', @FilestreamLevel OUTPUT                  declare @FilestreamShareName nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'ShareName', @FilestreamShareName OUTPUT                  declare @cluster_name nvarchar(128)         declare @quorum_type tinyint         declare @quorum_state tinyint         BEGIN TRY         SELECT @cluster_name = cluster_name,         @quorum_type = quorum_type,         @quorum_state = quorum_state         FROM sys.dm_hadr_cluster         END TRY         BEGIN CATCH           IF(ERROR_NUMBER() NOT IN (297,300, 15562, 371))         BEGIN         THROW         END         END CATCH         SELECT @SmoAuditLevel AS [AuditLevel], ISNULL(@NumErrorLogs, -1) AS [NumberOfLogFiles], (case when @SmoLoginMode < 3 then @SmoLoginMode else 9 end) AS [LoginMode], ISNULL(@SmoMailProfile,N'') AS [MailProfile], @BackupDirectory AS [BackupDirectory], @SmoPerfMonMode AS [PerfMonMode], ISNULL(@InstallSqlDataDir,N'') AS [InstallDataDirectory], CAST(@@SERVICENAME AS sysname) AS [ServiceName], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(ISNULL(SERVERPROPERTY(N'ProductUpdateLevel'), N'') AS sysname) AS [ProductUpdateLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY('IsClustered'), 0) AS bit) AS [IsClustered], CAST(ISNULL(SERVERPROPERTY(N'MachineName'), N'') AS sysname) AS [NetName], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], ISNULL(@ServiceStartMode,2) AS [ServiceStartMode], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY('instancedefaultdatapath') AS [DefaultFile], SERVERPROPERTY('instancedefaultlogpath') AS [DefaultLog], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(@ServiceAccount,N'') AS [ServiceAccount], CAST(@NamedPipesEnabled AS bit) AS [NamedPipesEnabled], CAST(@TcpEnabled AS bit) AS [TcpEnabled], ISNULL(@InstallSharedDirectory,N'') AS [InstallSharedDirectory], ISNULL(suser_sname(sid_binary(ISNULL(@SqlGroup,N''))),N'') AS [SqlDomainGroup], case when 1=msdb.dbo.fn_syspolicy_is_automation_enabled() and exists (select * from msdb.dbo.syspolicy_system_health_state  where target_query_expression_with_id like 'Server%' ) then 1 else 0 end AS [PolicyHealthState], @FilestreamLevel AS [FilestreamLevel], ISNULL(@FilestreamShareName,N'') AS [FilestreamShareName], -1 AS [TapeLoadWaitTime], CAST(SERVERPROPERTY(N'IsHadrEnabled') AS bit) AS [IsHadrEnabled], SERVERPROPERTY(N'HADRManagerStatus') AS [HadrManagerStatus], ISNULL(@cluster_name, '') AS [ClusterName], ISNULL(@quorum_type, 4) AS [ClusterQuorumType], ISNULL(@quorum_state, 3) AS [ClusterQuorumState], SUSER_SID(@ServiceAccount, 0) AS [ServiceAccountSid], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled], CAST(         serverproperty(N'Servername')        AS sysname) AS [Name], CAST(         ISNULL(serverproperty(N'instancename'),N'')        AS sysname) AS [InstanceName], CAST(0x0001 AS int) AS [Status], SERVERPROPERTY('PathSeparator') AS [PathSeparator], 0 AS [IsContainedAuthentication], CAST(null AS int) AS [ServerType]"
0x9ABE638695049A4A,1,76,77,0,0,"select case when encrypt_option = N'TRUE' then 1 else 0 end, protocol_version from sys.dm_exec_connections where session_id = @@SPID"
0xB4B85FC77BA791BC,1,63,63,2,0,"         declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         if (SERVERPROPERTY('EngineEdition') = 8 /* SQL Managed Instance */)         begin           select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 1           select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 2         end         else         begin           select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where name=N'master'           select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where name=N'mastlog'         end         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'SOFTWARE\Microsoft\MSSQLServer\Setup', N'SQLPath', @SmoRoot OUTPUT          SELECT CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], SERVERPROPERTY('PathSeparator') AS [PathSeparator], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY(N'MachineName'),N'') AS sysname) AS [NetName], CAST(ISNULL(SERVERPROPERTY('IsClustered'),N'') AS bit) AS [IsClustered], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled]"
0xD0FD09682E9B2ED6,1,62,62,2,0,SELECT s.name AS [Name] FROM sys.schemas AS s ORDER BY [Name] ASC
0x0FE1D85EDC9E7E23,1,52,91,0,0,"         declare @HkeyLocal nvarchar(18)         declare @ServicesRegPath nvarchar(34)         declare @SqlServiceRegPath sysname         declare @BrowserServiceRegPath sysname         declare @MSSqlServerRegPath nvarchar(31)         declare @InstanceNamesRegPath nvarchar(59)         declare @InstanceRegPath sysname         declare @SetupRegPath sysname         declare @NpRegPath sysname         declare @TcpRegPath sysname         declare @RegPathParams sysname         declare @FilestreamRegPath sysname          select @HkeyLocal=N'HKEY_LOCAL_MACHINE'          -- Instance-based paths         select @MSSqlServerRegPath=N'SOFTWARE\Microsoft\MSSQLServer'         select @InstanceRegPath=@MSSqlServerRegPath + N'\MSSQLServer'         select @FilestreamRegPath=@InstanceRegPath + N'\Filestream'         select @SetupRegPath=@MSSqlServerRegPath + N'\Setup'         select @RegPathParams=@InstanceRegPath+'\Parameters'          -- Services         select @ServicesRegPath=N'SYSTEM\CurrentControlSet\Services'         select @SqlServiceRegPath=@ServicesRegPath + N'\MSSQLSERVER'         select @BrowserServiceRegPath=@ServicesRegPath + N'\SQLBrowser'          -- InstanceId setting         select @InstanceNamesRegPath=N'SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL'          -- Network settings         select @NpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Np'         select @TcpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Tcp'                  declare @SmoAuditLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'AuditLevel', @SmoAuditLevel OUTPUT                  declare @NumErrorLogs int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'NumErrorLogs', @NumErrorLogs OUTPUT                  declare @SmoLoginMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'LoginMode', @SmoLoginMode OUTPUT                  declare @SmoMailProfile nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'MailAccountName', @SmoMailProfile OUTPUT                  declare @BackupDirectory nvarchar(512)         if 1=isnull(cast(SERVERPROPERTY('IsLocalDB') as bit), 0)         select @BackupDirectory=cast(SERVERPROPERTY('instancedefaultdatapath') as nvarchar(512))         else         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'BackupDirectory', @BackupDirectory OUTPUT                  declare @SmoPerfMonMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'Performance', @SmoPerfMonMode OUTPUT          if @SmoPerfMonMode is null         begin         set @SmoPerfMonMode = 1000         end                  declare @InstallSqlDataDir nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLDataRoot', @InstallSqlDataDir OUTPUT                  declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 1         select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 2         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @SmoRoot OUTPUT                  declare @ServiceStartMode int         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'Start', @ServiceStartMode OUTPUT                  declare @ServiceAccount nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'ObjectName', @ServiceAccount OUTPUT                  declare @NamedPipesEnabled int         exec master.dbo.xp_instance_regread @HkeyLocal, @NpRegPath, N'Enabled', @NamedPipesEnabled OUTPUT                  declare @TcpEnabled int         EXEC master.sys.xp_instance_regread @HkeyLocal, @TcpRegPath, N'Enabled', @TcpEnabled OUTPUT                  declare @InstallSharedDirectory nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @InstallSharedDirectory OUTPUT                  declare @SqlGroup nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLGroup', @SqlGroup OUTPUT                  declare @FilestreamLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'EnableLevel', @FilestreamLevel OUTPUT                  declare @FilestreamShareName nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'ShareName', @FilestreamShareName OUTPUT                  declare @cluster_name nvarchar(128)         declare @quorum_type tinyint         declare @quorum_state tinyint         BEGIN TRY         SELECT @cluster_name = cluster_name,         @quorum_type = quorum_type,         @quorum_state = quorum_state         FROM sys.dm_hadr_cluster         END TRY         BEGIN CATCH           IF(ERROR_NUMBER() NOT IN (297,300, 15562, 371))         BEGIN         THROW         END         END CATCH         SELECT @SmoAuditLevel AS [AuditLevel], ISNULL(@NumErrorLogs, -1) AS [NumberOfLogFiles], (case when @SmoLoginMode < 3 then @SmoLoginMode else 9 end) AS [LoginMode], ISNULL(@SmoMailProfile,N'') AS [MailProfile], @BackupDirectory AS [BackupDirectory], @SmoPerfMonMode AS [PerfMonMode], ISNULL(@InstallSqlDataDir,N'') AS [InstallDataDirectory], CAST(@@SERVICENAME AS sysname) AS [ServiceName], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(ISNULL(SERVERPROPERTY(N'ProductUpdateLevel'), N'') AS sysname) AS [ProductUpdateLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY('IsClustered'), 0) AS bit) AS [IsClustered], CAST(ISNULL(SERVERPROPERTY(N'MachineName'), N'') AS sysname) AS [NetName], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], ISNULL(@ServiceStartMode,2) AS [ServiceStartMode], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY('instancedefaultdatapath') AS [DefaultFile], SERVERPROPERTY('instancedefaultlogpath') AS [DefaultLog], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(@ServiceAccount,N'') AS [ServiceAccount], CAST(@NamedPipesEnabled AS bit) AS [NamedPipesEnabled], CAST(@TcpEnabled AS bit) AS [TcpEnabled], ISNULL(@InstallSharedDirectory,N'') AS [InstallSharedDirectory], ISNULL(suser_sname(sid_binary(ISNULL(@SqlGroup,N''))),N'') AS [SqlDomainGroup], case when 1=msdb.dbo.fn_syspolicy_is_automation_enabled() and exists (select * from msdb.dbo.syspolicy_system_health_state  where target_query_expression_with_id like 'Server%' ) then 1 else 0 end AS [PolicyHealthState], @FilestreamLevel AS [FilestreamLevel], ISNULL(@FilestreamShareName,N'') AS [FilestreamShareName], -1 AS [TapeLoadWaitTime], CAST(SERVERPROPERTY(N'IsHadrEnabled') AS bit) AS [IsHadrEnabled], SERVERPROPERTY(N'HADRManagerStatus') AS [HadrManagerStatus], ISNULL(@cluster_name, '') AS [ClusterName], ISNULL(@quorum_type, 4) AS [ClusterQuorumType], ISNULL(@quorum_state, 3) AS [ClusterQuorumState], SUSER_SID(@ServiceAccount, 0) AS [ServiceAccountSid], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled], CAST(         serverproperty(N'Servername')        AS sysname) AS [Name], CAST(         ISNULL(serverproperty(N'instancename'),N'')        AS sysname) AS [InstanceName], CAST(0x0001 AS int) AS [Status], SERVERPROPERTY('PathSeparator') AS [PathSeparator], 0 AS [IsContainedAuthentication], CAST(null AS int) AS [ServerType]"
0xB4B85FC77BA791BC,1,38,38,2,0,"         declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         if (SERVERPROPERTY('EngineEdition') = 8 /* SQL Managed Instance */)         begin           select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 1           select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 2         end         else         begin           select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where name=N'master'           select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where name=N'mastlog'         end         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'SOFTWARE\Microsoft\MSSQLServer\Setup', N'SQLPath', @SmoRoot OUTPUT          SELECT CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], SERVERPROPERTY('PathSeparator') AS [PathSeparator], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY(N'MachineName'),N'') AS sysname) AS [NetName], CAST(ISNULL(SERVERPROPERTY('IsClustered'),N'') AS bit) AS [IsClustered], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled]"
0x98A530CE5357B9BF,1,32,32,0,0,"DECLARE @edition sysname; SET @edition = cast(SERVERPROPERTY(N'EDITION') as sysname); SELECT case when @edition = N'SQL Azure' then 2 else 1 end as 'DatabaseEngineType', SERVERPROPERTY('EngineEdition') AS DatabaseEngineEdition, SERVERPROPERTY('ProductVersion') AS ProductVersion, @@MICROSOFTVERSION AS MicrosoftVersion; select host_platform from sys.dm_os_host_info if @edition = N'SQL Azure'    select 'TCP' as ConnectionProtocol else   exec ('select CONVERT(nvarchar(40),CONNECTIONPROPERTY(''net_transport'')) as ConnectionProtocol') "
0x90840303ED46D854,1,31,31,2,0,"         declare @HkeyLocal nvarchar(18)         declare @ServicesRegPath nvarchar(34)         declare @SqlServiceRegPath sysname         declare @BrowserServiceRegPath sysname         declare @MSSqlServerRegPath nvarchar(31)         declare @InstanceNamesRegPath nvarchar(59)         declare @InstanceRegPath sysname         declare @SetupRegPath sysname         declare @NpRegPath sysname         declare @TcpRegPath sysname         declare @RegPathParams sysname         declare @FilestreamRegPath sysname          select @HkeyLocal=N'HKEY_LOCAL_MACHINE'          -- Instance-based paths         select @MSSqlServerRegPath=N'SOFTWARE\Microsoft\MSSQLServer'         select @InstanceRegPath=@MSSqlServerRegPath + N'\MSSQLServer'         select @FilestreamRegPath=@InstanceRegPath + N'\Filestream'         select @SetupRegPath=@MSSqlServerRegPath + N'\Setup'         select @RegPathParams=@InstanceRegPath+'\Parameters'          -- Services         select @ServicesRegPath=N'SYSTEM\CurrentControlSet\Services'         select @SqlServiceRegPath=@ServicesRegPath + N'\MSSQLSERVER'         select @BrowserServiceRegPath=@ServicesRegPath + N'\SQLBrowser'          -- InstanceId setting         select @InstanceNamesRegPath=N'SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL'          -- Network settings         select @NpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Np'         select @TcpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Tcp'                  declare @SmoAuditLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'AuditLevel', @SmoAuditLevel OUTPUT                  declare @NumErrorLogs int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'NumErrorLogs', @NumErrorLogs OUTPUT                  declare @SmoLoginMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'LoginMode', @SmoLoginMode OUTPUT                  declare @SmoMailProfile nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'MailAccountName', @SmoMailProfile OUTPUT                  declare @BackupDirectory nvarchar(512)         if 1=isnull(cast(SERVERPROPERTY('IsLocalDB') as bit), 0)         select @BackupDirectory=cast(SERVERPROPERTY('instancedefaultdatapath') as nvarchar(512))         else         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'BackupDirectory', @BackupDirectory OUTPUT                  declare @SmoPerfMonMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'Performance', @SmoPerfMonMode OUTPUT          if @SmoPerfMonMode is null         begin         set @SmoPerfMonMode = 1000         end                  declare @InstallSqlDataDir nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLDataRoot', @InstallSqlDataDir OUTPUT                  declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 1         select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 2         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @SmoRoot OUTPUT                  declare @ServiceStartMode int         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'Start', @ServiceStartMode OUTPUT                  declare @ServiceAccount nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'ObjectName', @ServiceAccount OUTPUT                  declare @NamedPipesEnabled int         exec master.dbo.xp_instance_regread @HkeyLocal, @NpRegPath, N'Enabled', @NamedPipesEnabled OUTPUT                  declare @TcpEnabled int         EXEC master.sys.xp_instance_regread @HkeyLocal, @TcpRegPath, N'Enabled', @TcpEnabled OUTPUT                  declare @InstallSharedDirectory nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @InstallSharedDirectory OUTPUT                  declare @SqlGroup nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLGroup', @SqlGroup OUTPUT                  declare @FilestreamLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'EnableLevel', @FilestreamLevel OUTPUT                  declare @FilestreamShareName nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'ShareName', @FilestreamShareName OUTPUT                  declare @cluster_name nvarchar(128)         declare @quorum_type tinyint         declare @quorum_state tinyint         BEGIN TRY         SELECT @cluster_name = cluster_name,         @quorum_type = quorum_type,         @quorum_state = quorum_state         FROM sys.dm_hadr_cluster         END TRY         BEGIN CATCH           IF(ERROR_NUMBER() NOT IN (297,300, 15562, 371))         BEGIN         THROW         END         END CATCH         SELECT @SmoAuditLevel AS [AuditLevel], ISNULL(@NumErrorLogs, -1) AS [NumberOfLogFiles], (case when @SmoLoginMode < 3 then @SmoLoginMode else 9 end) AS [LoginMode], ISNULL(@SmoMailProfile,N'') AS [MailProfile], @BackupDirectory AS [BackupDirectory], @SmoPerfMonMode AS [PerfMonMode], ISNULL(@InstallSqlDataDir,N'') AS [InstallDataDirectory], CAST(@@SERVICENAME AS sysname) AS [ServiceName], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(ISNULL(SERVERPROPERTY(N'ProductUpdateLevel'), N'') AS sysname) AS [ProductUpdateLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY('IsClustered'), 0) AS bit) AS [IsClustered], CAST(ISNULL(SERVERPROPERTY(N'MachineName'), N'') AS sysname) AS [NetName], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], ISNULL(@ServiceStartMode,2) AS [ServiceStartMode], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY('instancedefaultdatapath') AS [DefaultFile], SERVERPROPERTY('instancedefaultlogpath') AS [DefaultLog], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(@ServiceAccount,N'') AS [ServiceAccount], CAST(@NamedPipesEnabled AS bit) AS [NamedPipesEnabled], CAST(@TcpEnabled AS bit) AS [TcpEnabled], ISNULL(@InstallSharedDirectory,N'') AS [InstallSharedDirectory], ISNULL(suser_sname(sid_binary(ISNULL(@SqlGroup,N''))),N'') AS [SqlDomainGroup], case when 1=msdb.dbo.fn_syspolicy_is_automation_enabled() and exists (select * from msdb.dbo.syspolicy_system_health_state  where target_query_expression_with_id like 'Server%' ) then 1 else 0 end AS [PolicyHealthState], @FilestreamLevel AS [FilestreamLevel], ISNULL(@FilestreamShareName,N'') AS [FilestreamShareName], -1 AS [TapeLoadWaitTime], CAST(SERVERPROPERTY(N'IsHadrEnabled') AS bit) AS [IsHadrEnabled], SERVERPROPERTY(N'HADRManagerStatus') AS [HadrManagerStatus], ISNULL(@cluster_name, '') AS [ClusterName], ISNULL(@quorum_type, 4) AS [ClusterQuorumType], ISNULL(@quorum_state, 3) AS [ClusterQuorumState], SUSER_SID(@ServiceAccount, 0) AS [ServiceAccountSid], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled], CAST(         serverproperty(N'Servername')        AS sysname) AS [Name], CAST(         ISNULL(serverproperty(N'instancename'),N'')        AS sysname) AS [InstanceName], CAST(0x0001 AS int) AS [Status], SERVERPROPERTY('PathSeparator') AS [PathSeparator], 0 AS [IsContainedAuthentication], CAST(null AS int) AS [ServerType]"
0x0A6673EAB3C7E30F,1,21,22,0,0,SELECT (select schema_name()) AS [DefaultSchema]
