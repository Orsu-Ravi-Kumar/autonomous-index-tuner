query_hash,execution_count,avg_cpu_time,avg_elapsed_time,avg_logical_reads,avg_logical_writes,query_text
0xF7A1FBFA732F8299,12,7632,9035,677,0,"(@1 tinyint,@2 varchar(8000))SELECT * FROM [dbo].[HeavyTable] WHERE [Age]=@1 AND [City]=@2"
0x536191182F18123A,1,12523,18699,224,0,"         declare @HkeyLocal nvarchar(18)         declare @ServicesRegPath nvarchar(34)         declare @SqlServiceRegPath sysname         declare @BrowserServiceRegPath sysname         declare @MSSqlServerRegPath nvarchar(31)         declare @InstanceNamesRegPath nvarchar(59)         declare @InstanceRegPath sysname         declare @SetupRegPath sysname         declare @NpRegPath sysname         declare @TcpRegPath sysname         declare @RegPathParams sysname         declare @FilestreamRegPath sysname          select @HkeyLocal=N'HKEY_LOCAL_MACHINE'          -- Instance-based paths         select @MSSqlServerRegPath=N'SOFTWARE\Microsoft\MSSQLServer'         select @InstanceRegPath=@MSSqlServerRegPath + N'\MSSQLServer'         select @FilestreamRegPath=@InstanceRegPath + N'\Filestream'         select @SetupRegPath=@MSSqlServerRegPath + N'\Setup'         select @RegPathParams=@InstanceRegPath+'\Parameters'          -- Services         select @ServicesRegPath=N'SYSTEM\CurrentControlSet\Services'         select @SqlServiceRegPath=@ServicesRegPath + N'\MSSQLSERVER'         select @BrowserServiceRegPath=@ServicesRegPath + N'\SQLBrowser'          -- InstanceId setting         select @InstanceNamesRegPath=N'SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL'          -- Network settings         select @NpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Np'         select @TcpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Tcp'                  declare @SmoAuditLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'AuditLevel', @SmoAuditLevel OUTPUT                  declare @NumErrorLogs int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'NumErrorLogs', @NumErrorLogs OUTPUT                  declare @SmoLoginMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'LoginMode', @SmoLoginMode OUTPUT                  declare @SmoMailProfile nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'MailAccountName', @SmoMailProfile OUTPUT                  declare @BackupDirectory nvarchar(512)         if 1=isnull(cast(SERVERPROPERTY('IsLocalDB') as bit), 0)         select @BackupDirectory=cast(SERVERPROPERTY('instancedefaultdatapath') as nvarchar(512))         else         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'BackupDirectory', @BackupDirectory OUTPUT                  declare @SmoPerfMonMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'Performance', @SmoPerfMonMode OUTPUT          if @SmoPerfMonMode is null         begin         set @SmoPerfMonMode = 1000         end                  declare @InstallSqlDataDir nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLDataRoot', @InstallSqlDataDir OUTPUT                  declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 1         select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 2         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @SmoRoot OUTPUT                  declare @ServiceStartMode int         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'Start', @ServiceStartMode OUTPUT                  declare @ServiceAccount nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'ObjectName', @ServiceAccount OUTPUT                  declare @NamedPipesEnabled int         exec master.dbo.xp_instance_regread @HkeyLocal, @NpRegPath, N'Enabled', @NamedPipesEnabled OUTPUT                  declare @TcpEnabled int         EXEC master.sys.xp_instance_regread @HkeyLocal, @TcpRegPath, N'Enabled', @TcpEnabled OUTPUT                  declare @InstallSharedDirectory nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @InstallSharedDirectory OUTPUT                  declare @SqlGroup nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLGroup', @SqlGroup OUTPUT                  declare @FilestreamLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'EnableLevel', @FilestreamLevel OUTPUT                  declare @FilestreamShareName nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'ShareName', @FilestreamShareName OUTPUT                  declare @cluster_name nvarchar(128)         declare @quorum_type tinyint         declare @quorum_state tinyint         BEGIN TRY         SELECT @cluster_name = cluster_name,         @quorum_type = quorum_type,         @quorum_state = quorum_state         FROM sys.dm_hadr_cluster         END TRY         BEGIN CATCH           IF(ERROR_NUMBER() NOT IN (297,300, 15562, 371))         BEGIN         THROW         END         END CATCH         SELECT @SmoAuditLevel AS [AuditLevel], ISNULL(@NumErrorLogs, -1) AS [NumberOfLogFiles], (case when @SmoLoginMode < 3 then @SmoLoginMode else 9 end) AS [LoginMode], ISNULL(@SmoMailProfile,N'') AS [MailProfile], @BackupDirectory AS [BackupDirectory], @SmoPerfMonMode AS [PerfMonMode], ISNULL(@InstallSqlDataDir,N'') AS [InstallDataDirectory], CAST(@@SERVICENAME AS sysname) AS [ServiceName], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(ISNULL(SERVERPROPERTY(N'ProductUpdateLevel'), N'') AS sysname) AS [ProductUpdateLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY('IsClustered'), 0) AS bit) AS [IsClustered], CAST(ISNULL(SERVERPROPERTY(N'MachineName'), N'') AS sysname) AS [NetName], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], ISNULL(@ServiceStartMode,2) AS [ServiceStartMode], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY('instancedefaultdatapath') AS [DefaultFile], SERVERPROPERTY('instancedefaultlogpath') AS [DefaultLog], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(@ServiceAccount,N'') AS [ServiceAccount], CAST(@NamedPipesEnabled AS bit) AS [NamedPipesEnabled], CAST(@TcpEnabled AS bit) AS [TcpEnabled], ISNULL(@InstallSharedDirectory,N'') AS [InstallSharedDirectory], ISNULL(suser_sname(sid_binary(ISNULL(@SqlGroup,N''))),N'') AS [SqlDomainGroup], case when 1=msdb.dbo.fn_syspolicy_is_automation_enabled() and exists (select * from msdb.dbo.syspolicy_system_health_state  where target_query_expression_with_id like 'Server%' ) then 1 else 0 end AS [PolicyHealthState], @FilestreamLevel AS [FilestreamLevel], ISNULL(@FilestreamShareName,N'') AS [FilestreamShareName], -1 AS [TapeLoadWaitTime], CAST(SERVERPROPERTY(N'IsHadrEnabled') AS bit) AS [IsHadrEnabled], SERVERPROPERTY(N'HADRManagerStatus') AS [HadrManagerStatus], ISNULL(@cluster_name, '') AS [ClusterName], ISNULL(@quorum_type, 4) AS [ClusterQuorumType], ISNULL(@quorum_state, 3) AS [ClusterQuorumState], SUSER_SID(@ServiceAccount, 0) AS [ServiceAccountSid], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled], CAST(         serverproperty(N'Servername')        AS sysname) AS [Name], CAST(         ISNULL(serverproperty(N'instancename'),N'')        AS sysname) AS [InstanceName], CAST(0x0001 AS int) AS [Status], SERVERPROPERTY('PathSeparator') AS [PathSeparator], 0 AS [IsContainedAuthentication], CAST(null AS int) AS [ServerType]"
0x9ABE638695049A4A,1,3833,3834,0,0,"select case when encrypt_option = N'TRUE' then 1 else 0 end, protocol_version from sys.dm_exec_connections where session_id = @@SPID"
0x83CCAC2AAF467BFC,1,3604,4482,50,0,SELECT rl.name AS [Name] FROM sys.database_principals AS rl WHERE (rl.type = 'R') ORDER BY [Name] ASC
0xD3833A3D2F7E0E89,1,3312,5108,292,0,"SELECT log.name AS [Name], log.principal_id AS [ID], ISNULL(ak.name,N'') AS [AsymmetricKey], ISNULL(cert.name,N'') AS [Certificate], ISNULL(c.name,N'') AS [Credential], CASE WHEN N'U' = log.type THEN 0 WHEN N'G' = log.type THEN 1 WHEN N'S' = log.type THEN 2 WHEN N'C' = log.type THEN 3 WHEN N'K' = log.type THEN 4  WHEN N'E' = log.type THEN 5 WHEN N'X' = log.type THEN 6 END AS [LoginType] FROM sys.server_principals AS log LEFT OUTER JOIN master.sys.asymmetric_keys AS ak ON ak.sid = log.sid LEFT OUTER JOIN master.sys.certificates AS cert ON cert.sid = log.sid LEFT OUTER JOIN sys.credentials AS c ON c.credential_id = log.credential_id WHERE (log.type in ('U', 'G', 'S', 'C', 'K', 'E', 'X') AND log.principal_id not between 101 and 255 AND log.name <> N'##MS_AgentSigningCertificate##') ORDER BY [Name] ASC"
0xDFEAC05268CFFA62,1,2736,2736,55,0,"SELECT SCHEMA_NAME(tbl.schema_id) AS [Schema], tbl.name AS [Name], tbl.object_id AS [ID] FROM sys.tables AS tbl WHERE (tbl.name not like '#%') ORDER BY [Schema] ASC,[Name] ASC"
0x0FE1D85EDC9E7E23,1,2041,2095,0,0,"         declare @HkeyLocal nvarchar(18)         declare @ServicesRegPath nvarchar(34)         declare @SqlServiceRegPath sysname         declare @BrowserServiceRegPath sysname         declare @MSSqlServerRegPath nvarchar(31)         declare @InstanceNamesRegPath nvarchar(59)         declare @InstanceRegPath sysname         declare @SetupRegPath sysname         declare @NpRegPath sysname         declare @TcpRegPath sysname         declare @RegPathParams sysname         declare @FilestreamRegPath sysname          select @HkeyLocal=N'HKEY_LOCAL_MACHINE'          -- Instance-based paths         select @MSSqlServerRegPath=N'SOFTWARE\Microsoft\MSSQLServer'         select @InstanceRegPath=@MSSqlServerRegPath + N'\MSSQLServer'         select @FilestreamRegPath=@InstanceRegPath + N'\Filestream'         select @SetupRegPath=@MSSqlServerRegPath + N'\Setup'         select @RegPathParams=@InstanceRegPath+'\Parameters'          -- Services         select @ServicesRegPath=N'SYSTEM\CurrentControlSet\Services'         select @SqlServiceRegPath=@ServicesRegPath + N'\MSSQLSERVER'         select @BrowserServiceRegPath=@ServicesRegPath + N'\SQLBrowser'          -- InstanceId setting         select @InstanceNamesRegPath=N'SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL'          -- Network settings         select @NpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Np'         select @TcpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Tcp'                  declare @SmoAuditLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'AuditLevel', @SmoAuditLevel OUTPUT                  declare @NumErrorLogs int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'NumErrorLogs', @NumErrorLogs OUTPUT                  declare @SmoLoginMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'LoginMode', @SmoLoginMode OUTPUT                  declare @SmoMailProfile nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'MailAccountName', @SmoMailProfile OUTPUT                  declare @BackupDirectory nvarchar(512)         if 1=isnull(cast(SERVERPROPERTY('IsLocalDB') as bit), 0)         select @BackupDirectory=cast(SERVERPROPERTY('instancedefaultdatapath') as nvarchar(512))         else         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'BackupDirectory', @BackupDirectory OUTPUT                  declare @SmoPerfMonMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'Performance', @SmoPerfMonMode OUTPUT          if @SmoPerfMonMode is null         begin         set @SmoPerfMonMode = 1000         end                  declare @InstallSqlDataDir nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLDataRoot', @InstallSqlDataDir OUTPUT                  declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 1         select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 2         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @SmoRoot OUTPUT                  declare @ServiceStartMode int         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'Start', @ServiceStartMode OUTPUT                  declare @ServiceAccount nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'ObjectName', @ServiceAccount OUTPUT                  declare @NamedPipesEnabled int         exec master.dbo.xp_instance_regread @HkeyLocal, @NpRegPath, N'Enabled', @NamedPipesEnabled OUTPUT                  declare @TcpEnabled int         EXEC master.sys.xp_instance_regread @HkeyLocal, @TcpRegPath, N'Enabled', @TcpEnabled OUTPUT                  declare @InstallSharedDirectory nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @InstallSharedDirectory OUTPUT                  declare @SqlGroup nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLGroup', @SqlGroup OUTPUT                  declare @FilestreamLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'EnableLevel', @FilestreamLevel OUTPUT                  declare @FilestreamShareName nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'ShareName', @FilestreamShareName OUTPUT                  declare @cluster_name nvarchar(128)         declare @quorum_type tinyint         declare @quorum_state tinyint         BEGIN TRY         SELECT @cluster_name = cluster_name,         @quorum_type = quorum_type,         @quorum_state = quorum_state         FROM sys.dm_hadr_cluster         END TRY         BEGIN CATCH           IF(ERROR_NUMBER() NOT IN (297,300, 15562, 371))         BEGIN         THROW         END         END CATCH         SELECT @SmoAuditLevel AS [AuditLevel], ISNULL(@NumErrorLogs, -1) AS [NumberOfLogFiles], (case when @SmoLoginMode < 3 then @SmoLoginMode else 9 end) AS [LoginMode], ISNULL(@SmoMailProfile,N'') AS [MailProfile], @BackupDirectory AS [BackupDirectory], @SmoPerfMonMode AS [PerfMonMode], ISNULL(@InstallSqlDataDir,N'') AS [InstallDataDirectory], CAST(@@SERVICENAME AS sysname) AS [ServiceName], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(ISNULL(SERVERPROPERTY(N'ProductUpdateLevel'), N'') AS sysname) AS [ProductUpdateLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY('IsClustered'), 0) AS bit) AS [IsClustered], CAST(ISNULL(SERVERPROPERTY(N'MachineName'), N'') AS sysname) AS [NetName], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], ISNULL(@ServiceStartMode,2) AS [ServiceStartMode], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY('instancedefaultdatapath') AS [DefaultFile], SERVERPROPERTY('instancedefaultlogpath') AS [DefaultLog], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(@ServiceAccount,N'') AS [ServiceAccount], CAST(@NamedPipesEnabled AS bit) AS [NamedPipesEnabled], CAST(@TcpEnabled AS bit) AS [TcpEnabled], ISNULL(@InstallSharedDirectory,N'') AS [InstallSharedDirectory], ISNULL(suser_sname(sid_binary(ISNULL(@SqlGroup,N''))),N'') AS [SqlDomainGroup], case when 1=msdb.dbo.fn_syspolicy_is_automation_enabled() and exists (select * from msdb.dbo.syspolicy_system_health_state  where target_query_expression_with_id like 'Server%' ) then 1 else 0 end AS [PolicyHealthState], @FilestreamLevel AS [FilestreamLevel], ISNULL(@FilestreamShareName,N'') AS [FilestreamShareName], -1 AS [TapeLoadWaitTime], CAST(SERVERPROPERTY(N'IsHadrEnabled') AS bit) AS [IsHadrEnabled], SERVERPROPERTY(N'HADRManagerStatus') AS [HadrManagerStatus], ISNULL(@cluster_name, '') AS [ClusterName], ISNULL(@quorum_type, 4) AS [ClusterQuorumType], ISNULL(@quorum_state, 3) AS [ClusterQuorumState], SUSER_SID(@ServiceAccount, 0) AS [ServiceAccountSid], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled], CAST(         serverproperty(N'Servername')        AS sysname) AS [Name], CAST(         ISNULL(serverproperty(N'instancename'),N'')        AS sysname) AS [InstanceName], CAST(0x0001 AS int) AS [Status], SERVERPROPERTY('PathSeparator') AS [PathSeparator], 0 AS [IsContainedAuthentication], CAST(null AS int) AS [ServerType]"
0x98A530CE5357B9BF,3,594,594,0,0,"DECLARE @edition sysname; SET @edition = cast(SERVERPROPERTY(N'EDITION') as sysname); SELECT case when @edition = N'SQL Azure' then 2 else 1 end as 'DatabaseEngineType', SERVERPROPERTY('EngineEdition') AS DatabaseEngineEdition, SERVERPROPERTY('ProductVersion') AS ProductVersion, @@MICROSOFTVERSION AS MicrosoftVersion; select host_platform from sys.dm_os_host_info if @edition = N'SQL Azure'    select 'TCP' as ConnectionProtocol else   exec ('select CONVERT(nvarchar(40),CONNECTIONPROPERTY(''net_transport'')) as ConnectionProtocol') "
0x0A6673EAB3C7E30F,1,1570,1570,0,0,SELECT (select schema_name()) AS [DefaultSchema]
0xBE4B25FCC059AF08,1,1522,2267,41,0,"SELECT tr.name AS [Name], tr.object_id AS [ID], CAST(                 tr.is_ms_shipped             AS bit) AS [IsSystemObject], CASE WHEN tr.type = N'TR' THEN 1 WHEN tr.type = N'TA' THEN 2 ELSE 1 END AS [ImplementationType], CAST(CASE WHEN ISNULL(smtr.definition, ssmtr.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted] FROM sys.triggers AS tr LEFT OUTER JOIN sys.sql_modules AS smtr ON smtr.object_id = tr.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmtr ON ssmtr.object_id = tr.object_id WHERE (tr.parent_class = 0) ORDER BY [Name] ASC"
0x606553F55874F4F6,1,1497,2463,2,0,"SELECT tr.name AS [Name], tr.object_id AS [ID], CAST(                 tr.is_ms_shipped             AS bit) AS [IsSystemObject], CASE WHEN tr.type = N'TR' THEN 1 WHEN tr.type = N'TA' THEN 2 ELSE 1 END AS [ImplementationType], CAST(CASE WHEN ssmod.definition IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted] FROM master.sys.server_triggers AS tr LEFT OUTER JOIN master.sys.server_assembly_modules AS mod ON mod.object_id = tr.object_id LEFT OUTER JOIN sys.server_sql_modules AS ssmod ON ssmod.object_id = tr.object_id WHERE (tr.parent_class = 100) ORDER BY [Name] ASC"
0xE167F1DAA845040B,1,1174,1174,42,0,"SELECT dtb.name AS [Name], CAST(0 AS bit) AS [IsFabricDatabase], dtb.database_id AS [ID], CAST(case when dtb.name in ('master','model','msdb','tempdb') then 1 else dtb.is_distributor end AS bit) AS [IsSystemObject], dtb.collation_name AS [Collation], CAST(has_dbaccess(dtb.name) AS bit) AS [IsAccessible], dtb.name AS [DatabaseName2] FROM master.sys.databases AS dtb ORDER BY [Name] ASC"
0x88D56FCE1A0ADDA2,2,332,997,8,0,"(@_msparam_0 nvarchar(4000))SELECT dtb.collation_name AS [Collation], dtb.name AS [DatabaseName2] FROM master.sys.databases AS dtb WHERE (dtb.name=@_msparam_0)"
0xF4DCFC0F47C9D567,1,531,532,32,0,"SELECT dtb.name AS [Name], CAST(0 AS bit) AS [IsFabricDatabase], dtb.database_id AS [ID], CAST(has_dbaccess(dtb.name) AS bit) AS [IsAccessible] FROM master.sys.databases AS dtb ORDER BY [Name] ASC"
0xC85374EF1B622048,1,471,471,66,0,"SELECT u.name AS [Name], u.principal_id AS [ID], ISNULL(ak.name,N'') AS [AsymmetricKey], ISNULL(cert.name,N'') AS [Certificate],          CASE         WHEN N'C' = u.type THEN 1         WHEN N'K' = u.type THEN 2         WHEN N'S' = u.type AND SUSER_SNAME(u.sid) is null AND u.authentication_type != 2 THEN 3         WHEN N'E' = u.type or N'X' = u.type THEN 4         ELSE 0 END        AS [UserType] FROM sys.database_principals AS u LEFT OUTER JOIN sys.asymmetric_keys AS ak ON ak.sid = u.sid LEFT OUTER JOIN sys.certificates AS cert ON cert.sid = u.sid WHERE (u.type in ('U', 'S', 'G', 'C', 'K' ,'E', 'X')) ORDER BY [Name] ASC"
0xE2D8B1D89DF5F7CE,1,425,425,8,0,"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000))SELECT u.name AS [Name], u.principal_id AS [ID], CAST(CASE WHEN u.principal_id < 5 OR (u.principal_id >= 16384 and u.principal_id < 16400) THEN 1 ELSE 0 END AS bit) AS [IsSystemObject], CASE WHEN N'U' = u.type THEN 0 WHEN N'G' = u.type THEN 1 WHEN N'S' = u.type THEN 2 WHEN N'C' = u.type THEN 3 WHEN N'K' = u.type THEN 4 WHEN N'E' = u.type THEN 5 WHEN N'X' = u.type THEN 6 END AS [LoginType], CAST(CASE dp.state WHEN N'G' THEN 1 WHEN 'W' THEN 1 ELSE 0 END AS bit) AS [HasDBAccess], u.sid AS [Sid], u.create_date AS [CreateDate], u.modify_date AS [DateLastModified], ISNULL(u.default_schema_name,N'') AS [DefaultSchema], ISNULL(ak.name,N'') AS [AsymmetricKey], ISNULL(cert.name,N'') AS [Certificate], ISNULL(suser_sname(u.sid),N'') AS [Login], ISNULL(u.default_language_lcid, -1) AS [DefaultLanguageLcid], ISNULL(u.default_language_name,N'') AS [DefaultLanguageName], u.authentication_type AS [AuthenticationType],          CASE         WHEN N'C' = u.type THEN 1         WHEN N'K' = u.type THEN 2         WHEN N'S' = u.type AND SUSER_SNAME(u.sid) is null AND u.authentication_type != 2 THEN 3         WHEN N'E' = u.type or N'X' = u.type THEN 4         ELSE 0 END        AS [UserType] FROM sys.database_principals AS u LEFT OUTER JOIN sys.database_permissions AS dp ON dp.grantee_principal_id = u.principal_id and dp.type = @_msparam_0 LEFT OUTER JOIN sys.asymmetric_keys AS ak ON ak.sid = u.sid LEFT OUTER JOIN sys.certificates AS cert ON cert.sid = u.sid WHERE (u.type in ('U', 'S', 'G', 'C', 'K' ,'E', 'X'))and(u.name=@_msparam_1)"
0x83CCAC2AAF467BFC,1,335,1133,30,0,SELECT rl.name AS [Name] FROM sys.database_principals AS rl WHERE (rl.type = 'A') ORDER BY [Name] ASC
0xB4B85FC77BA791BC,1,255,1114,2,0,"         declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         if (SERVERPROPERTY('EngineEdition') = 8 /* SQL Managed Instance */)         begin           select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 1           select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 2         end         else         begin           select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where name=N'master'           select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where name=N'mastlog'         end         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'SOFTWARE\Microsoft\MSSQLServer\Setup', N'SQLPath', @SmoRoot OUTPUT          SELECT CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], SERVERPROPERTY('PathSeparator') AS [PathSeparator], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY(N'MachineName'),N'') AS sysname) AS [NetName], CAST(ISNULL(SERVERPROPERTY('IsClustered'),N'') AS bit) AS [IsClustered], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled]"
0xED6D407A55041948,1,213,214,10,0,"(@_msparam_0 nvarchar(4000))SELECT dtb.containment AS [ContainmentType], dtb.catalog_collation_type AS [CatalogCollation] FROM master.sys.databases AS dtb WHERE (dtb.name=@_msparam_0)"
0x713F4292A9422787,2,99,490,2,0,"CREATE   FUNCTION fn_syspolicy_is_automation_enabled() RETURNS bit AS BEGIN     DECLARE @ret bit;     SELECT @ret = CONVERT(bit, current_value)         FROM msdb.dbo.syspolicy_configuration          WHERE name = 'Enabled'       RETURN @ret; END "
0xCAF08BE13BA099DA,1,182,182,8,0,"(@_msparam_0 nvarchar(4000))SELECT '' AS [DefaultSchema], dtb.name AS [DatabaseName] FROM master.sys.databases AS dtb WHERE (dtb.name=@_msparam_0)"
0x90840303ED46D854,1,154,155,2,0,"         declare @HkeyLocal nvarchar(18)         declare @ServicesRegPath nvarchar(34)         declare @SqlServiceRegPath sysname         declare @BrowserServiceRegPath sysname         declare @MSSqlServerRegPath nvarchar(31)         declare @InstanceNamesRegPath nvarchar(59)         declare @InstanceRegPath sysname         declare @SetupRegPath sysname         declare @NpRegPath sysname         declare @TcpRegPath sysname         declare @RegPathParams sysname         declare @FilestreamRegPath sysname          select @HkeyLocal=N'HKEY_LOCAL_MACHINE'          -- Instance-based paths         select @MSSqlServerRegPath=N'SOFTWARE\Microsoft\MSSQLServer'         select @InstanceRegPath=@MSSqlServerRegPath + N'\MSSQLServer'         select @FilestreamRegPath=@InstanceRegPath + N'\Filestream'         select @SetupRegPath=@MSSqlServerRegPath + N'\Setup'         select @RegPathParams=@InstanceRegPath+'\Parameters'          -- Services         select @ServicesRegPath=N'SYSTEM\CurrentControlSet\Services'         select @SqlServiceRegPath=@ServicesRegPath + N'\MSSQLSERVER'         select @BrowserServiceRegPath=@ServicesRegPath + N'\SQLBrowser'          -- InstanceId setting         select @InstanceNamesRegPath=N'SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL'          -- Network settings         select @NpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Np'         select @TcpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Tcp'                  declare @SmoAuditLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'AuditLevel', @SmoAuditLevel OUTPUT                  declare @NumErrorLogs int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'NumErrorLogs', @NumErrorLogs OUTPUT                  declare @SmoLoginMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'LoginMode', @SmoLoginMode OUTPUT                  declare @SmoMailProfile nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'MailAccountName', @SmoMailProfile OUTPUT                  declare @BackupDirectory nvarchar(512)         if 1=isnull(cast(SERVERPROPERTY('IsLocalDB') as bit), 0)         select @BackupDirectory=cast(SERVERPROPERTY('instancedefaultdatapath') as nvarchar(512))         else         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'BackupDirectory', @BackupDirectory OUTPUT                  declare @SmoPerfMonMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'Performance', @SmoPerfMonMode OUTPUT          if @SmoPerfMonMode is null         begin         set @SmoPerfMonMode = 1000         end                  declare @InstallSqlDataDir nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLDataRoot', @InstallSqlDataDir OUTPUT                  declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 1         select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 2         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @SmoRoot OUTPUT                  declare @ServiceStartMode int         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'Start', @ServiceStartMode OUTPUT                  declare @ServiceAccount nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'ObjectName', @ServiceAccount OUTPUT                  declare @NamedPipesEnabled int         exec master.dbo.xp_instance_regread @HkeyLocal, @NpRegPath, N'Enabled', @NamedPipesEnabled OUTPUT                  declare @TcpEnabled int         EXEC master.sys.xp_instance_regread @HkeyLocal, @TcpRegPath, N'Enabled', @TcpEnabled OUTPUT                  declare @InstallSharedDirectory nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @InstallSharedDirectory OUTPUT                  declare @SqlGroup nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLGroup', @SqlGroup OUTPUT                  declare @FilestreamLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'EnableLevel', @FilestreamLevel OUTPUT                  declare @FilestreamShareName nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'ShareName', @FilestreamShareName OUTPUT                  declare @cluster_name nvarchar(128)         declare @quorum_type tinyint         declare @quorum_state tinyint         BEGIN TRY         SELECT @cluster_name = cluster_name,         @quorum_type = quorum_type,         @quorum_state = quorum_state         FROM sys.dm_hadr_cluster         END TRY         BEGIN CATCH           IF(ERROR_NUMBER() NOT IN (297,300, 15562, 371))         BEGIN         THROW         END         END CATCH         SELECT @SmoAuditLevel AS [AuditLevel], ISNULL(@NumErrorLogs, -1) AS [NumberOfLogFiles], (case when @SmoLoginMode < 3 then @SmoLoginMode else 9 end) AS [LoginMode], ISNULL(@SmoMailProfile,N'') AS [MailProfile], @BackupDirectory AS [BackupDirectory], @SmoPerfMonMode AS [PerfMonMode], ISNULL(@InstallSqlDataDir,N'') AS [InstallDataDirectory], CAST(@@SERVICENAME AS sysname) AS [ServiceName], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(ISNULL(SERVERPROPERTY(N'ProductUpdateLevel'), N'') AS sysname) AS [ProductUpdateLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY('IsClustered'), 0) AS bit) AS [IsClustered], CAST(ISNULL(SERVERPROPERTY(N'MachineName'), N'') AS sysname) AS [NetName], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], ISNULL(@ServiceStartMode,2) AS [ServiceStartMode], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY('instancedefaultdatapath') AS [DefaultFile], SERVERPROPERTY('instancedefaultlogpath') AS [DefaultLog], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(@ServiceAccount,N'') AS [ServiceAccount], CAST(@NamedPipesEnabled AS bit) AS [NamedPipesEnabled], CAST(@TcpEnabled AS bit) AS [TcpEnabled], ISNULL(@InstallSharedDirectory,N'') AS [InstallSharedDirectory], ISNULL(suser_sname(sid_binary(ISNULL(@SqlGroup,N''))),N'') AS [SqlDomainGroup], case when 1=msdb.dbo.fn_syspolicy_is_automation_enabled() and exists (select * from msdb.dbo.syspolicy_system_health_state  where target_query_expression_with_id like 'Server%' ) then 1 else 0 end AS [PolicyHealthState], @FilestreamLevel AS [FilestreamLevel], ISNULL(@FilestreamShareName,N'') AS [FilestreamShareName], -1 AS [TapeLoadWaitTime], CAST(SERVERPROPERTY(N'IsHadrEnabled') AS bit) AS [IsHadrEnabled], SERVERPROPERTY(N'HADRManagerStatus') AS [HadrManagerStatus], ISNULL(@cluster_name, '') AS [ClusterName], ISNULL(@quorum_type, 4) AS [ClusterQuorumType], ISNULL(@quorum_state, 3) AS [ClusterQuorumState], SUSER_SID(@ServiceAccount, 0) AS [ServiceAccountSid], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled], CAST(         serverproperty(N'Servername')        AS sysname) AS [Name], CAST(         ISNULL(serverproperty(N'instancename'),N'')        AS sysname) AS [InstanceName], CAST(0x0001 AS int) AS [Status], SERVERPROPERTY('PathSeparator') AS [PathSeparator], 0 AS [IsContainedAuthentication], CAST(null AS int) AS [ServerType]"
0xD0FD09682E9B2ED6,1,72,72,2,0,SELECT s.name AS [Name] FROM sys.schemas AS s ORDER BY [Name] ASC
0xB4B85FC77BA791BC,1,62,62,2,0,"         declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         if (SERVERPROPERTY('EngineEdition') = 8 /* SQL Managed Instance */)         begin           select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 1           select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 2         end         else         begin           select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where name=N'master'           select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where name=N'mastlog'         end         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'SOFTWARE\Microsoft\MSSQLServer\Setup', N'SQLPath', @SmoRoot OUTPUT          SELECT CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], SERVERPROPERTY('PathSeparator') AS [PathSeparator], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY(N'MachineName'),N'') AS sysname) AS [NetName], CAST(ISNULL(SERVERPROPERTY('IsClustered'),N'') AS bit) AS [IsClustered], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled]"
0x90840303ED46D854,1,48,48,2,0,"         declare @HkeyLocal nvarchar(18)         declare @ServicesRegPath nvarchar(34)         declare @SqlServiceRegPath sysname         declare @BrowserServiceRegPath sysname         declare @MSSqlServerRegPath nvarchar(31)         declare @InstanceNamesRegPath nvarchar(59)         declare @InstanceRegPath sysname         declare @SetupRegPath sysname         declare @NpRegPath sysname         declare @TcpRegPath sysname         declare @RegPathParams sysname         declare @FilestreamRegPath sysname          select @HkeyLocal=N'HKEY_LOCAL_MACHINE'          -- Instance-based paths         select @MSSqlServerRegPath=N'SOFTWARE\Microsoft\MSSQLServer'         select @InstanceRegPath=@MSSqlServerRegPath + N'\MSSQLServer'         select @FilestreamRegPath=@InstanceRegPath + N'\Filestream'         select @SetupRegPath=@MSSqlServerRegPath + N'\Setup'         select @RegPathParams=@InstanceRegPath+'\Parameters'          -- Services         select @ServicesRegPath=N'SYSTEM\CurrentControlSet\Services'         select @SqlServiceRegPath=@ServicesRegPath + N'\MSSQLSERVER'         select @BrowserServiceRegPath=@ServicesRegPath + N'\SQLBrowser'          -- InstanceId setting         select @InstanceNamesRegPath=N'SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL'          -- Network settings         select @NpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Np'         select @TcpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Tcp'                  declare @SmoAuditLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'AuditLevel', @SmoAuditLevel OUTPUT                  declare @NumErrorLogs int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'NumErrorLogs', @NumErrorLogs OUTPUT                  declare @SmoLoginMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'LoginMode', @SmoLoginMode OUTPUT                  declare @SmoMailProfile nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'MailAccountName', @SmoMailProfile OUTPUT                  declare @BackupDirectory nvarchar(512)         if 1=isnull(cast(SERVERPROPERTY('IsLocalDB') as bit), 0)         select @BackupDirectory=cast(SERVERPROPERTY('instancedefaultdatapath') as nvarchar(512))         else         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'BackupDirectory', @BackupDirectory OUTPUT                  declare @SmoPerfMonMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'Performance', @SmoPerfMonMode OUTPUT          if @SmoPerfMonMode is null         begin         set @SmoPerfMonMode = 1000         end                  declare @InstallSqlDataDir nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLDataRoot', @InstallSqlDataDir OUTPUT                  declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 1         select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where file_id = 2         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @SmoRoot OUTPUT                  declare @ServiceStartMode int         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'Start', @ServiceStartMode OUTPUT                  declare @ServiceAccount nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'ObjectName', @ServiceAccount OUTPUT                  declare @NamedPipesEnabled int         exec master.dbo.xp_instance_regread @HkeyLocal, @NpRegPath, N'Enabled', @NamedPipesEnabled OUTPUT                  declare @TcpEnabled int         EXEC master.sys.xp_instance_regread @HkeyLocal, @TcpRegPath, N'Enabled', @TcpEnabled OUTPUT                  declare @InstallSharedDirectory nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @InstallSharedDirectory OUTPUT                  declare @SqlGroup nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLGroup', @SqlGroup OUTPUT                  declare @FilestreamLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'EnableLevel', @FilestreamLevel OUTPUT                  declare @FilestreamShareName nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'ShareName', @FilestreamShareName OUTPUT                  declare @cluster_name nvarchar(128)         declare @quorum_type tinyint         declare @quorum_state tinyint         BEGIN TRY         SELECT @cluster_name = cluster_name,         @quorum_type = quorum_type,         @quorum_state = quorum_state         FROM sys.dm_hadr_cluster         END TRY         BEGIN CATCH           IF(ERROR_NUMBER() NOT IN (297,300, 15562, 371))         BEGIN         THROW         END         END CATCH         SELECT @SmoAuditLevel AS [AuditLevel], ISNULL(@NumErrorLogs, -1) AS [NumberOfLogFiles], (case when @SmoLoginMode < 3 then @SmoLoginMode else 9 end) AS [LoginMode], ISNULL(@SmoMailProfile,N'') AS [MailProfile], @BackupDirectory AS [BackupDirectory], @SmoPerfMonMode AS [PerfMonMode], ISNULL(@InstallSqlDataDir,N'') AS [InstallDataDirectory], CAST(@@SERVICENAME AS sysname) AS [ServiceName], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(ISNULL(SERVERPROPERTY(N'ProductUpdateLevel'), N'') AS sysname) AS [ProductUpdateLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY('IsClustered'), 0) AS bit) AS [IsClustered], CAST(ISNULL(SERVERPROPERTY(N'MachineName'), N'') AS sysname) AS [NetName], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], ISNULL(@ServiceStartMode,2) AS [ServiceStartMode], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY('instancedefaultdatapath') AS [DefaultFile], SERVERPROPERTY('instancedefaultlogpath') AS [DefaultLog], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(@ServiceAccount,N'') AS [ServiceAccount], CAST(@NamedPipesEnabled AS bit) AS [NamedPipesEnabled], CAST(@TcpEnabled AS bit) AS [TcpEnabled], ISNULL(@InstallSharedDirectory,N'') AS [InstallSharedDirectory], ISNULL(suser_sname(sid_binary(ISNULL(@SqlGroup,N''))),N'') AS [SqlDomainGroup], case when 1=msdb.dbo.fn_syspolicy_is_automation_enabled() and exists (select * from msdb.dbo.syspolicy_system_health_state  where target_query_expression_with_id like 'Server%' ) then 1 else 0 end AS [PolicyHealthState], @FilestreamLevel AS [FilestreamLevel], ISNULL(@FilestreamShareName,N'') AS [FilestreamShareName], -1 AS [TapeLoadWaitTime], CAST(SERVERPROPERTY(N'IsHadrEnabled') AS bit) AS [IsHadrEnabled], SERVERPROPERTY(N'HADRManagerStatus') AS [HadrManagerStatus], ISNULL(@cluster_name, '') AS [ClusterName], ISNULL(@quorum_type, 4) AS [ClusterQuorumType], ISNULL(@quorum_state, 3) AS [ClusterQuorumState], SUSER_SID(@ServiceAccount, 0) AS [ServiceAccountSid], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled], CAST(         serverproperty(N'Servername')        AS sysname) AS [Name], CAST(         ISNULL(serverproperty(N'instancename'),N'')        AS sysname) AS [InstanceName], CAST(0x0001 AS int) AS [Status], SERVERPROPERTY('PathSeparator') AS [PathSeparator], 0 AS [IsContainedAuthentication], CAST(null AS int) AS [ServerType]"
0x98A530CE5357B9BF,1,26,27,0,0,"DECLARE @edition sysname; SET @edition = cast(SERVERPROPERTY(N'EDITION') as sysname); SELECT case when @edition = N'SQL Azure' then 2 else 1 end as 'DatabaseEngineType', SERVERPROPERTY('EngineEdition') AS DatabaseEngineEdition, SERVERPROPERTY('ProductVersion') AS ProductVersion, @@MICROSOFTVERSION AS MicrosoftVersion; select host_platform from sys.dm_os_host_info if @edition = N'SQL Azure'    select 'TCP' as ConnectionProtocol else   exec ('select CONVERT(nvarchar(40),CONNECTIONPROPERTY(''net_transport'')) as ConnectionProtocol') "
